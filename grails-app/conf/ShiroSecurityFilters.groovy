/*
  *Copyright 2013 Trustees of the University of Pennsylvania. Licensed under the
  *	Educational Community License, Version 2.0 (the "License"); you may
  *	not use this file except in compliance with the License. You may
  *	obtain a copy of the License at
  *
  *http://www.osedu.org/licenses/ECL-2.0
  *
  *	Unless required by applicable law or agreed to in writing,
  *	software distributed under the License is distributed on an "AS IS"
  *	BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
  *	or implied. See the License for the specific language governing
  *	permissions and limitations under the License.  */

import org.apache.shiro.SecurityUtils

/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */
class ShiroSecurityFilters {
    def manageReportService
    def restService
    def filters = {
        all(uri: "/**") {
            before = {

                // Ignore direct views (e.g. the default main index page).
                if (!controllerName) return true
                //this should be handled by shiro's filter map
                if (request.requestURL.contains("/rest/")) return true
                if (restService.getFromRestCache(params.get("restKey"))) return true
                def details = manageReportService.getControllerDetails().get(controllerName)
                def roles = details.roles
                def isProtected = details.isProtected

                if (isProtected) {
                    def notLoggedIn = SecurityUtils.subject.principal == null
                    if (notLoggedIn) {
                        //will force a login
                        accessControl()
                        return false
                    }
                }

                if (roles) {
                    return accessControl(auth: false) {
                        def hasAccess = true
                        roles.each {
                            log.debug "checking for access to $controllerName for role ${it}"
                            hasAccess = hasAccess && role(it)
                        }

                        return hasAccess
                    }
                }
            }
        }
    }
}

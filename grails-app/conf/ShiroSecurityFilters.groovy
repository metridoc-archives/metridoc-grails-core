/*
 * Copyright 2010 Trustees of the University of Pennsylvania Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 * http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

import org.apache.shiro.SecurityUtils
import org.apache.shiro.authc.UsernamePasswordToken
import org.apache.shiro.codec.Base64

/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */
class ShiroSecurityFilters {
    //this forces spring to initialize, otherwise this filter will prematurely access the application context before
    //it has been initialized and throw an exception
    def grailsApplication
    def securityService
    def anonymousApps
    Closure fallback
    def customSecurityByController = [:]
    private initiated = false

    def filters = {
        all(uri: "/**") {
            before = {

                if (!SecurityUtils.subject.isAuthenticated()) {
                    def authToken
                    def authorization = request.getHeader("Authorization")
                    boolean basicAuth = false
                    if(authorization) {
                        def tokens = authorization.split()
                        log.info "attempting to authorize using http basic"
                        if(tokens.size() == 2 && tokens[0] && tokens[0].equalsIgnoreCase("basic") && tokens[1]) {
                            def userNamePassword = tokens[1]
                            def decoded = Base64.decodeToString(userNamePassword)
                            def userNamePasswordTokens = decoded.split(":")
                            if(userNamePasswordTokens.size() == 2 && userNamePasswordTokens[0] && userNamePasswordTokens[1]) {
                                authToken = new UsernamePasswordToken(userNamePasswordTokens[0], userNamePasswordTokens[1])
                                try {
                                    log.info "attempting to login as ${userNamePasswordTokens[0]}"
                                    SecurityUtils.subject.login(authToken)
                                    basicAuth = true
                                } catch (Exception e) {
                                    log.error "failed to login as ${userNamePasswordTokens[0]} using basic"
                                }
                            }

                        }
                    }

                    if (!basicAuth) {
                        log.info "currently not logged in, logging in as anonymous user"
                        authToken = new UsernamePasswordToken("anonymous", "password")
                        SecurityUtils.subject.login(authToken)
                    }
                }

                if (!controllerName) return true

                accessControl {
                    securityService.authorized(
                        [
                            request: request,
                            response: response,
                            session: session,
                            servletContext: servletContext,
                            flash: flash,
                            params: params,
                            actionName: actionName,
                            controllerName: controllerName,
                            grailsApplication: grailsApplication,
                            applicationContext: applicationContext
                        ]
                        , controllerName
                    )
                }
            }
        }
    }
}

/*
 * Copyright 2010 Trustees of the University of Pennsylvania Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 * http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */


import org.apache.shiro.SecurityUtils
import org.apache.shiro.authc.UsernamePasswordToken
import metridoc.admin.ReportsConfiguration

/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */
class ShiroSecurityFilters {
    //this forces spring to initialize, otherwise this filter will prematurely access the application context before
    //it has been initialized and throw an exception
    def grailsApplication

    def filters = {
        all(uri: "/**") {
            before = {

                //if we are not logged in, let's login as anonymous
                if (!SecurityUtils.subject.isAuthenticated()) {
                    log.info "currently not logged in, logging in as anonymous user"
                    def authToken = new UsernamePasswordToken("anonymous", "password")
                    SecurityUtils.subject.login(authToken)
                }

                // Ignore direct views (e.g. the default main index page).
                if(!controllerName) return true
//                if (controllerName.contains("home")) return true
                // Access control by convention.
                accessControl {
                    def config = ReportsConfiguration.find {
                        name == controllerName
                    }

                    def roleToTest = config ? config.role : "ROLE_ADMIN"
                    role(roleToTest) || role("ROLE_ADMIN")
                }
            }
        }
    }
}
